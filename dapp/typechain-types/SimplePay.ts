/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SimplePay {
  export type EmployeeStruct = {
    wallet: AddressLike;
    basicSalary: BigNumberish;
    allowances: BigNumberish;
    deductions: BigNumberish;
    exists: boolean;
  };

  export type EmployeeStructOutput = [
    wallet: string,
    basicSalary: bigint,
    allowances: bigint,
    deductions: bigint,
    exists: boolean
  ] & {
    wallet: string;
    basicSalary: bigint;
    allowances: bigint;
    deductions: bigint;
    exists: boolean;
  };
}

export interface SimplePayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WEI_PER_ETHER"
      | "addEmployeeWallet"
      | "admin"
      | "deposit"
      | "employeeAddresses"
      | "employees"
      | "fundContract"
      | "getAllEmployees"
      | "getBalance"
      | "isAdmin"
      | "removeEmployee"
      | "transferSalary"
      | "updateEmployeeSalary"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractFunded"
      | "EmployeeAdded"
      | "SalaryTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "WEI_PER_ETHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addEmployeeWallet",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "employeeAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeSalary",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "WEI_PER_ETHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmployeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "employeeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ContractFundedEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [sender: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeAddedEvent {
  export type InputTuple = [
    employee: AddressLike,
    basicSalary: BigNumberish,
    allowances: BigNumberish,
    deductions: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    employee: string,
    basicSalary: bigint,
    allowances: bigint,
    deductions: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    employee: string;
    basicSalary: bigint;
    allowances: bigint;
    deductions: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalaryTransferredEvent {
  export type InputTuple = [
    employee: AddressLike,
    netSalary: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    employee: string,
    netSalary: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    employee: string;
    netSalary: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimplePay extends BaseContract {
  connect(runner?: ContractRunner | null): SimplePay;
  waitForDeployment(): Promise<this>;

  interface: SimplePayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WEI_PER_ETHER: TypedContractMethod<[], [bigint], "view">;

  addEmployeeWallet: TypedContractMethod<
    [
      _wallet: AddressLike,
      _basicSalary: BigNumberish,
      _allowances: BigNumberish,
      _deductions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  employeeAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean] & {
        wallet: string;
        basicSalary: bigint;
        allowances: bigint;
        deductions: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  fundContract: TypedContractMethod<[], [void], "payable">;

  getAllEmployees: TypedContractMethod<
    [],
    [SimplePay.EmployeeStructOutput[]],
    "view"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  isAdmin: TypedContractMethod<[], [boolean], "view">;

  removeEmployee: TypedContractMethod<
    [_wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  transferSalary: TypedContractMethod<
    [_wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEmployeeSalary: TypedContractMethod<
    [
      _wallet: AddressLike,
      _basicSalary: BigNumberish,
      _allowances: BigNumberish,
      _deductions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WEI_PER_ETHER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addEmployeeWallet"
  ): TypedContractMethod<
    [
      _wallet: AddressLike,
      _basicSalary: BigNumberish,
      _allowances: BigNumberish,
      _deductions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "employeeAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean] & {
        wallet: string;
        basicSalary: bigint;
        allowances: bigint;
        deductions: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<[], [SimplePay.EmployeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeEmployee"
  ): TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferSalary"
  ): TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEmployeeSalary"
  ): TypedContractMethod<
    [
      _wallet: AddressLike,
      _basicSalary: BigNumberish,
      _allowances: BigNumberish,
      _deductions: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ContractFunded"
  ): TypedContractEvent<
    ContractFundedEvent.InputTuple,
    ContractFundedEvent.OutputTuple,
    ContractFundedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeAdded"
  ): TypedContractEvent<
    EmployeeAddedEvent.InputTuple,
    EmployeeAddedEvent.OutputTuple,
    EmployeeAddedEvent.OutputObject
  >;
  getEvent(
    key: "SalaryTransferred"
  ): TypedContractEvent<
    SalaryTransferredEvent.InputTuple,
    SalaryTransferredEvent.OutputTuple,
    SalaryTransferredEvent.OutputObject
  >;

  filters: {
    "ContractFunded(address,uint256,uint256)": TypedContractEvent<
      ContractFundedEvent.InputTuple,
      ContractFundedEvent.OutputTuple,
      ContractFundedEvent.OutputObject
    >;
    ContractFunded: TypedContractEvent<
      ContractFundedEvent.InputTuple,
      ContractFundedEvent.OutputTuple,
      ContractFundedEvent.OutputObject
    >;

    "EmployeeAdded(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;
    EmployeeAdded: TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;

    "SalaryTransferred(address,uint256,uint256)": TypedContractEvent<
      SalaryTransferredEvent.InputTuple,
      SalaryTransferredEvent.OutputTuple,
      SalaryTransferredEvent.OutputObject
    >;
    SalaryTransferred: TypedContractEvent<
      SalaryTransferredEvent.InputTuple,
      SalaryTransferredEvent.OutputTuple,
      SalaryTransferredEvent.OutputObject
    >;
  };
}
