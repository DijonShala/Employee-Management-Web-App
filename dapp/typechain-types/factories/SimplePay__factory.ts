/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { SimplePay, SimplePayInterface } from "../SimplePay";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "employee",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netSalary",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "SalaryTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_basicSalary",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_allowances",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_deductions",
        type: "uint256",
      },
    ],
    name: "addEmployee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "employees",
    outputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "basicSalary",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "allowances",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deductions",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "removeEmployee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "transferSalary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_basicSalary",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_allowances",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_deductions",
        type: "uint256",
      },
    ],
    name: "updateEmployeeSalary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50335f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113a08061005b5f395ff3fe608060405260043610610090575f3560e01c8063b6db75a011610058578063b6db75a01461015e578063d067894714610188578063d0e30db0146101c8578063d108177a146101d2578063f851a440146101fa57610090565b806312065fe0146100945780632e1a7d4d146100be5780634a4247d9146100e657806359315c1b1461010e57806359bdc3ed14610136575b5f5ffd5b34801561009f575f5ffd5b506100a8610224565b6040516100b59190610e03565b60405180910390f35b3480156100c9575f5ffd5b506100e460048036038101906100df9190610e4a565b61022b565b005b3480156100f1575f5ffd5b5061010c60048036038101906101079190610ecf565b610363565b005b348015610119575f5ffd5b50610134600480360381019061012f9190610f33565b6105f3565b005b348015610141575f5ffd5b5061015c60048036038101906101579190610ecf565b6108ec565b005b348015610169575f5ffd5b50610172610adb565b60405161017f9190610f78565b60405180910390f35b348015610193575f5ffd5b506101ae60048036038101906101a99190610f33565b610b30565b6040516101bf959493929190610fa0565b60405180910390f35b6101d0610b8d565b005b3480156101dd575f5ffd5b506101f860048036038101906101f39190610f33565b610c1d565b005b348015610205575f5ffd5b5061020e610dc7565b60405161021b9190610ff1565b60405180910390f35b5f47905090565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b09061108a565b60405180910390fd5b804710156102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f3906110f2565b60405180910390fd5b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f1935050505015801561035f573d5f5f3e3d5ffd5b5050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e89061108a565b60405180910390fd5b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff161561047e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061115a565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036104ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e3906111c2565b60405180910390fd5b6040518060a001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020016001151581525060015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015f6101000a81548160ff02191690831515021790555090505050505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610681576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106789061108a565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff1661070d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107049061122a565b60405180910390fd5b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015f9054906101000a900460ff16151515158152505090505f8160600151826040015183602001516107fe9190611275565b61080891906112a8565b90508047101561084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084490611325565b60405180910390fd5b815f015173ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610893573d5f5f3e3d5ffd5b50815f015173ffffffffffffffffffffffffffffffffffffffff167f01968c3a2f4ab0c5313d079cbf4d7c1ca622defe616bb477603911d0b950e00282426040516108df929190611343565b60405180910390a2505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461097a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109719061108a565b60405180910390fd5b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff16610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd9061122a565b60405180910390fd5b8260015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101819055508160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600201819055508060015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003018190555050505050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6001602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004015f9054906101000a900460ff16905085565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c129061108a565b60405180910390fd5b565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca29061108a565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff16610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e9061122a565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f5f82015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f9055600282015f9055600382015f9055600482015f6101000a81549060ff0219169055505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f819050919050565b610dfd81610deb565b82525050565b5f602082019050610e165f830184610df4565b92915050565b5f5ffd5b610e2981610deb565b8114610e33575f5ffd5b50565b5f81359050610e4481610e20565b92915050565b5f60208284031215610e5f57610e5e610e1c565b5b5f610e6c84828501610e36565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e9e82610e75565b9050919050565b610eae81610e94565b8114610eb8575f5ffd5b50565b5f81359050610ec981610ea5565b92915050565b5f5f5f5f60808587031215610ee757610ee6610e1c565b5b5f610ef487828801610ebb565b9450506020610f0587828801610e36565b9350506040610f1687828801610e36565b9250506060610f2787828801610e36565b91505092959194509250565b5f60208284031215610f4857610f47610e1c565b5b5f610f5584828501610ebb565b91505092915050565b5f8115159050919050565b610f7281610f5e565b82525050565b5f602082019050610f8b5f830184610f69565b92915050565b610f9a81610e94565b82525050565b5f60a082019050610fb35f830188610f91565b610fc06020830187610df4565b610fcd6040830186610df4565b610fda6060830185610df4565b610fe76080830184610f69565b9695505050505050565b5f6020820190506110045f830184610f91565b92915050565b5f82825260208201905092915050565b7f4f6e6c792061646d696e2063616e20706572666f726d207468697320616374695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f61107460228361100a565b915061107f8261101a565b604082019050919050565b5f6020820190508181035f8301526110a181611068565b9050919050565b7f496e73756666696369656e742062616c616e63650000000000000000000000005f82015250565b5f6110dc60148361100a565b91506110e7826110a8565b602082019050919050565b5f6020820190508181035f830152611109816110d0565b9050919050565b7f456d706c6f79656520616c7265616479206578697374730000000000000000005f82015250565b5f61114460178361100a565b915061114f82611110565b602082019050919050565b5f6020820190508181035f83015261117181611138565b9050919050565b7f496e76616c69642077616c6c65742061646472657373000000000000000000005f82015250565b5f6111ac60168361100a565b91506111b782611178565b602082019050919050565b5f6020820190508181035f8301526111d9816111a0565b9050919050565b7f456d706c6f79656520646f6573206e6f742065786973740000000000000000005f82015250565b5f61121460178361100a565b915061121f826111e0565b602082019050919050565b5f6020820190508181035f83015261124181611208565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61127f82610deb565b915061128a83610deb565b92508282019050808211156112a2576112a1611248565b5b92915050565b5f6112b282610deb565b91506112bd83610deb565b92508282039050818111156112d5576112d4611248565b5b92915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e63650000005f82015250565b5f61130f601d8361100a565b915061131a826112db565b602082019050919050565b5f6020820190508181035f83015261133c81611303565b9050919050565b5f6040820190506113565f830185610df4565b6113636020830184610df4565b939250505056fea264697066735822122068ca7f63755675e7cc98fde9d9765f6b9edc75e3a866b1f416eb65db4a88fa4464736f6c634300081c0033";

type SimplePayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimplePayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimplePay__factory extends ContractFactory {
  constructor(...args: SimplePayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimplePay & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimplePay__factory {
    return super.connect(runner) as SimplePay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimplePayInterface {
    return new Interface(_abi) as SimplePayInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SimplePay {
    return new Contract(address, _abi, runner) as unknown as SimplePay;
  }
}
