/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { SimplePay, SimplePayInterface } from "../SimplePay";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "employee",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "netSalary",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "SalaryTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "WEI_PER_ETHER",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_basicSalary",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_allowances",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_deductions",
        type: "uint256",
      },
    ],
    name: "addEmployeeWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "employeeAddresses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "employees",
    outputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "basicSalary",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "allowances",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deductions",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundContract",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllEmployees",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "basicSalary",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "allowances",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deductions",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "exists",
            type: "bool",
          },
        ],
        internalType: "struct SimplePay.Employee[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "removeEmployee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "transferSalary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_basicSalary",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_allowances",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_deductions",
        type: "uint256",
      },
    ],
    name: "updateEmployeeSalary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50335f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c1d8061005b5f395ff3fe6080604052600436106100dc575f3560e01c8063b6db75a01161007e578063d0e30db011610058578063d0e30db014610284578063d108177a1461028e578063e3366fed146102b6578063f851a440146102e0576100dc565b8063b6db75a014610210578063bd097e211461023a578063d067894714610244576100dc565b80632e1a7d4d116100ba5780632e1a7d4d1461015c57806359315c1b1461018457806359bdc3ed146101ac5780637521720b146101d4576100dc565b806312065fe0146100e057806319a1b54f1461010a578063226d895a14610134575b5f5ffd5b3480156100eb575f5ffd5b506100f461030a565b6040516101019190611398565b60405180910390f35b348015610115575f5ffd5b5061011e610311565b60405161012b9190611398565b60405180910390f35b34801561013f575f5ffd5b5061015a60048036038101906101559190611439565b61031d565b005b348015610167575f5ffd5b50610182600480360381019061017d919061149d565b6105e3565b005b34801561018f575f5ffd5b506101aa60048036038101906101a591906114c8565b61071b565b005b3480156101b7575f5ffd5b506101d260048036038101906101cd9190611439565b610a3a565b005b3480156101df575f5ffd5b506101fa60048036038101906101f5919061149d565b610c29565b6040516102079190611502565b60405180910390f35b34801561021b575f5ffd5b50610224610c64565b6040516102319190611535565b60405180910390f35b610242610cb9565b005b34801561024f575f5ffd5b5061026a600480360381019061026591906114c8565b610cfd565b60405161027b95949392919061154e565b60405180910390f35b61028c610d5a565b005b348015610299575f5ffd5b506102b460048036038101906102af91906114c8565b610dea565b005b3480156102c1575f5ffd5b506102ca61108b565b6040516102d791906116da565b60405180910390f35b3480156102eb575f5ffd5b506102f4611242565b6040516103019190611502565b60405180910390f35b5f47905090565b670de0b6b3a764000081565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a29061177a565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610419576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610410906117e2565b60405180910390fd5b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff166105d0576040518060a001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020016001151581525060015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015f6101000a81548160ff021916908315150217905550905050600284908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105dd565b6105dc84848484610a3a565b5b50505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610671576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106689061177a565b60405180910390fd5b804710156106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab9061184a565b60405180910390fd5b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610717573d5f5f3e3d5ffd5b5050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a09061177a565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff16610835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082c906118b2565b60405180910390fd5b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015f9054906101000a900460ff16151515158152505090505f670de0b6b3a7640000620f424061012c84606001518560400151866020015161093691906118fd565b6109409190611930565b61094a9190611963565b61095491906119d1565b61095e9190611963565b9050804710156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a90611a4b565b60405180910390fd5b815f015173ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f193505050506109e2575f5ffd5b815f015173ffffffffffffffffffffffffffffffffffffffff167f01968c3a2f4ab0c5313d079cbf4d7c1ca622defe616bb477603911d0b950e0028242604051610a2d929190611a69565b60405180910390a2505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf9061177a565b60405180910390fd5b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff16610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b906118b2565b60405180910390fd5b8260015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101819055508160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600201819055508060015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206003018190555050505050565b60028181548110610c38575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b5f3411610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf290611ada565b60405180910390fd5b565b6001602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004015f9054906101000a900460ff16905085565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610de8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddf9061177a565b60405180910390fd5b565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6f9061177a565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206004015f9054906101000a900460ff16610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb906118b2565b60405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f5f82015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f9055600282015f9055600382015f9055600482015f6101000a81549060ff021916905550505f610f9b82611266565b905060026001600280549050610fb19190611930565b81548110610fc257610fc1611af8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028281548110610ffe57610ffd611af8565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600280548061105557611054611b25565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555050565b60605f60028054905090505f8167ffffffffffffffff8111156110b1576110b0611b52565b5b6040519080825280602002602001820160405280156110ea57816020015b6110d761133e565b8152602001906001900390816110cf5790505b5090505f5f90505b82811015611239575f6002828154811061110f5761110e611af8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015f9054906101000a900460ff1615151515815250508383815181106112205761121f611af8565b5b60200260200101819052505080806001019150506110f2565b50809250505090565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f5f90505b6002805490508110156112fd578273ffffffffffffffffffffffffffffffffffffffff16600282815481106112a4576112a3611af8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036112f05780915050611339565b808060010191505061126c565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133090611bc9565b60405180910390fd5b919050565b6040518060a001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81526020015f151581525090565b5f819050919050565b61139281611380565b82525050565b5f6020820190506113ab5f830184611389565b92915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6113de826113b5565b9050919050565b6113ee816113d4565b81146113f8575f5ffd5b50565b5f81359050611409816113e5565b92915050565b61141881611380565b8114611422575f5ffd5b50565b5f813590506114338161140f565b92915050565b5f5f5f5f60808587031215611451576114506113b1565b5b5f61145e878288016113fb565b945050602061146f87828801611425565b935050604061148087828801611425565b925050606061149187828801611425565b91505092959194509250565b5f602082840312156114b2576114b16113b1565b5b5f6114bf84828501611425565b91505092915050565b5f602082840312156114dd576114dc6113b1565b5b5f6114ea848285016113fb565b91505092915050565b6114fc816113d4565b82525050565b5f6020820190506115155f8301846114f3565b92915050565b5f8115159050919050565b61152f8161151b565b82525050565b5f6020820190506115485f830184611526565b92915050565b5f60a0820190506115615f8301886114f3565b61156e6020830187611389565b61157b6040830186611389565b6115886060830185611389565b6115956080830184611526565b9695505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6115d1816113d4565b82525050565b6115e081611380565b82525050565b6115ef8161151b565b82525050565b60a082015f8201516116095f8501826115c8565b50602082015161161c60208501826115d7565b50604082015161162f60408501826115d7565b50606082015161164260608501826115d7565b50608082015161165560808501826115e6565b50505050565b5f61166683836115f5565b60a08301905092915050565b5f602082019050919050565b5f6116888261159f565b61169281856115a9565b935061169d836115b9565b805f5b838110156116cd5781516116b4888261165b565b97506116bf83611672565b9250506001810190506116a0565b5085935050505092915050565b5f6020820190508181035f8301526116f2818461167e565b905092915050565b5f82825260208201905092915050565b7f4f6e6c792061646d696e2063616e20706572666f726d207468697320616374695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f6117646022836116fa565b915061176f8261170a565b604082019050919050565b5f6020820190508181035f83015261179181611758565b9050919050565b7f496e76616c69642077616c6c65742061646472657373000000000000000000005f82015250565b5f6117cc6016836116fa565b91506117d782611798565b602082019050919050565b5f6020820190508181035f8301526117f9816117c0565b9050919050565b7f496e73756666696369656e742062616c616e63650000000000000000000000005f82015250565b5f6118346014836116fa565b915061183f82611800565b602082019050919050565b5f6020820190508181035f83015261186181611828565b9050919050565b7f456d706c6f79656520646f6573206e6f742065786973740000000000000000005f82015250565b5f61189c6017836116fa565b91506118a782611868565b602082019050919050565b5f6020820190508181035f8301526118c981611890565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61190782611380565b915061191283611380565b925082820190508082111561192a576119296118d0565b5b92915050565b5f61193a82611380565b915061194583611380565b925082820390508181111561195d5761195c6118d0565b5b92915050565b5f61196d82611380565b915061197883611380565b925082820261198681611380565b9150828204841483151761199d5761199c6118d0565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6119db82611380565b91506119e683611380565b9250826119f6576119f56119a4565b5b828204905092915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e63652e00005f82015250565b5f611a35601e836116fa565b9150611a4082611a01565b602082019050919050565b5f6020820190508181035f830152611a6281611a29565b9050919050565b5f604082019050611a7c5f830185611389565b611a896020830184611389565b9392505050565b7f596f75206d7573742073656e6420736f6d6520457468657200000000000000005f82015250565b5f611ac46018836116fa565b9150611acf82611a90565b602082019050919050565b5f6020820190508181035f830152611af181611ab8565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f41646472657373206e6f7420666f756e640000000000000000000000000000005f82015250565b5f611bb36011836116fa565b9150611bbe82611b7f565b602082019050919050565b5f6020820190508181035f830152611be081611ba7565b905091905056fea26469706673582212202367def9969101456f325895b6622b7b307ad1d2870b019c7ded1637f7bed91064736f6c634300081c0033";

type SimplePayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimplePayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimplePay__factory extends ContractFactory {
  constructor(...args: SimplePayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimplePay & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimplePay__factory {
    return super.connect(runner) as SimplePay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimplePayInterface {
    return new Interface(_abi) as SimplePayInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SimplePay {
    return new Contract(address, _abi, runner) as unknown as SimplePay;
  }
}
